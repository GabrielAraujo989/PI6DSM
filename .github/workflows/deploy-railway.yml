name: Deploy DetecFace to Railway

on:
  push:
    branches:
      - main
    paths:
      - 'DetectFace/**'
  workflow_dispatch:

env:
  RAILWAY_PROJECT_NAME: detecface

jobs:
  test:
    name: Test DetecFace Service
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        working-directory: ./DetectFace
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run basic tests
        working-directory: ./DetectFace
        run: |
          python -c "import cv2; print('OpenCV version:', cv2.__version__)"
          python -c "import torch; print('PyTorch version:', torch.__version__)"
          python -c "import ultralytics; print('Ultralytics version:', ultralytics.__version__)"
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          
      - name: Verify file synchronization
        working-directory: ./DetectFace
        run: |
          echo "Verifying critical files are present and synchronized..."
          critical_files=("server.py" "requirements.txt" "requirements-pytorch.txt" "Dockerfile" "railway.toml")
          
          for file in "${critical_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file is missing!"
              exit 1
            fi
          done
          
          echo "‚úÖ All critical files are present"

  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Railway CLI
        run: npm install -g @railway/cli
        
      - name: Login to Railway
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}
        
      - name: Deploy to Railway with retry
        working-directory: ./DetectFace
        run: |
          # Implement retry with exponential backoff
          ATTEMPT=1
          MAX_ATTEMPTS=3
          BACKOFF=30
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Deployment attempt $ATTEMPT/$MAX_ATTEMPTS"
            
            if railway up --service ${{ env.RAILWAY_PROJECT_NAME }}; then
              echo "‚úÖ Deployment successful!"
              break
            else
              echo "‚ùå Deployment failed, retrying in $BACKOFF seconds..."
              sleep $BACKOFF
              BACKOFF=$((BACKOFF * 2))
              ATTEMPT=$((ATTEMPT + 1))
              
              if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
                echo "‚ùå Deployment failed after $MAX_ATTEMPTS attempts"
                exit 1
              fi
            fi
          done
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Get deployment URL
        id: deployment
        run: |
          # Implement retry with exponential backoff for getting deployment URL
          ATTEMPT=1
          MAX_ATTEMPTS=3
          BACKOFF=10
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Getting deployment URL attempt $ATTEMPT/$MAX_ATTEMPTS"
            
            DEPLOYMENT_URL=$(railway domain --service ${{ env.RAILWAY_PROJECT_NAME }})
            if [ -n "$DEPLOYMENT_URL" ]; then
              echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
              echo "‚úÖ Deployment URL retrieved: $DEPLOYMENT_URL"
              break
            else
              echo "‚ùå Failed to get deployment URL, retrying in $BACKOFF seconds..."
              sleep $BACKOFF
              BACKOFF=$((BACKOFF * 2))
              ATTEMPT=$((ATTEMPT + 1))
              
              if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
                echo "‚ùå Failed to get deployment URL after $MAX_ATTEMPTS attempts"
                exit 1
              fi
            fi
          done
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Railway CLI
        run: npm install -g @railway/cli
        
      - name: Get deployment URL
        id: deployment
        run: |
          # Implement retry with exponential backoff for getting deployment URL
          ATTEMPT=1
          MAX_ATTEMPTS=3
          BACKOFF=10
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Getting deployment URL attempt $ATTEMPT/$MAX_ATTEMPTS"
            
            DEPLOYMENT_URL=$(railway domain --service ${{ env.RAILWAY_PROJECT_NAME }})
            if [ -n "$DEPLOYMENT_URL" ]; then
              echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
              echo "‚úÖ Deployment URL retrieved: $DEPLOYMENT_URL"
              break
            else
              echo "‚ùå Failed to get deployment URL, retrying in $BACKOFF seconds..."
              sleep $BACKOFF
              BACKOFF=$((BACKOFF * 2))
              ATTEMPT=$((ATTEMPT + 1))
              
              if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
                echo "‚ùå Failed to get deployment URL after $MAX_ATTEMPTS attempts"
                exit 1
              fi
            fi
          done
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 60
          
      - name: Health check with extended timeout
        timeout-minutes: 10
        run: |
          echo "Performing health check on ${{ steps.deployment.outputs.url }}"
          
          # Try multiple times with exponential backoff
          ATTEMPT=1
          MAX_ATTEMPTS=10
          BACKOFF=15
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS"
            
            if curl -f --max-time 60 "${{ steps.deployment.outputs.url }}/"; then
              echo "‚úÖ Health check passed!"
              exit 0
            else
              echo "‚ùå Health check failed, retrying in $BACKOFF seconds..."
              sleep $BACKOFF
              BACKOFF=$((BACKOFF * 2))
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
          echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
          exit 1
          
      - name: Verify API endpoints
        run: |
          echo "Testing API endpoints..."
          
          # Test main endpoint
          curl -f "${{ steps.deployment.outputs.url }}/" || exit 1
          
          # Test health endpoint if exists
          curl -f "${{ steps.deployment.outputs.url }}/health" || echo "Health endpoint not available"
          
          echo "‚úÖ API endpoints verification completed!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, deploy, verify]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get deployment status
        if: needs.deploy.result == 'success' && needs.verify.result == 'success'
        run: |
          echo "üöÄ Deployment successful!"
          echo "Service is available at: $(railway domain --service ${{ env.RAILWAY_PROJECT_NAME }})"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Notify failure
        if: needs.deploy.result == 'failure' || needs.verify.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs for more information."
          exit 1